
import React, { useState, useMemo, useEffect, useRef } from 'react';
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { Course } from '../types';
import { SEMESTER_COURSES, GRADE_POINTS, GRADE_OPTIONS } from '../constants';
import SgpaDisplay from './SgpaDisplay';
import DownloadIcon from './icons/DownloadIcon';

interface SgpaCalculatorProps {
  sgpaState: {
    selectedSemesterKey: string;
    grades: Record<string, string>;
  };
  setSgpaState: React.Dispatch<React.SetStateAction<{
    selectedSemesterKey: string;
    grades: Record<string, string>;
  }>>;
}

const SgpaCalculator: React.FC<SgpaCalculatorProps> = ({ sgpaState, setSgpaState }) => {
  const { selectedSemesterKey, grades } = sgpaState;
  const [isSticky, setIsSticky] = useState(false);
  const displayElementRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const displayElement = displayElementRef.current;
    if (!displayElement) return;

    const observer = new IntersectionObserver(
        ([entry]) => {
            setIsSticky(!entry.isIntersecting && entry.boundingClientRect.y < 0);
        },
        { threshold: 0 }
    );
    
    observer.observe(displayElement);

    return () => {
        if (displayElement) observer.unobserve(displayElement);
    };
  }, []);

  const courses: Course[] = useMemo(
    () => (selectedSemesterKey ? SEMESTER_COURSES[selectedSemesterKey] : []),
    [selectedSemesterKey]
  );

  const semesterStats = useMemo(() => {
    let totalPoints = 0;
    let attemptedCredits = 0;
    let securedCredits = 0;

    const offeredCredits = courses.reduce((sum, course) => sum + course.credits, 0);

    courses.forEach(course => {
      const grade = grades[course.code];
      if (grade && grade !== 'N/A') {
        const gradePoint = GRADE_POINTS[grade];
        attemptedCredits += course.credits;
        totalPoints += gradePoint * course.credits;
        if (grade !== 'F') {
            securedCredits += course.credits;
        }
      }
    });

    const sgpa = attemptedCredits > 0 ? totalPoints / attemptedCredits : 0;

    return { 
        totalPoints, 
        attemptedCredits,
        offeredCredits,
        securedCredits,
        sgpa 
    };
  }, [grades, courses]);

  const handleGradeChange = (courseCode: string, grade: string) => {
    setSgpaState(prev => ({ 
      ...prev,
      grades: { ...prev.grades, [courseCode]: grade }
    }));
  };
  
  const handleSemesterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
      const newSemesterKey = e.target.value;
      // Reset grades when semester changes for a new calculation
      setSgpaState({
        selectedSemesterKey: newSemesterKey,
        grades: {}
      });
  };

  const handleDownloadPdf = () => {
    if (!selectedSemesterKey) return;

    const doc = new jsPDF();

    // Title
    doc.setFontSize(22);
    doc.text('Semester GPA Report', 105, 20, { align: 'center' });
    doc.setFontSize(12);
    doc.text('Department of Electrical and Electronic Engineering', 105, 28, { align: 'center' });

    // Semester Info
    doc.setFontSize(16);
    doc.text(`Semester: ${selectedSemesterKey}`, 14, 45);

    // Table
    const tableColumn = ["Course Code", "Course Name", "Credits", "Grade", "Points"];
    const tableRows: (string | number)[][] = [];

    courses.forEach(course => {
      const grade = grades[course.code] || 'N/A';
      const gradePoint = GRADE_POINTS[grade];
      const row = [
        course.code,
        course.name,
        course.credits,
        grade,
        grade === 'N/A' ? 'N/A' : (gradePoint * course.credits).toFixed(2),
      ];
      tableRows.push(row);
    });

    autoTable(doc, {
      head: [tableColumn],
      body: tableRows,
      startY: 55,
      theme: 'grid',
      headStyles: { fillColor: [37, 99, 235] }, // primary-600
    });
    
    // Summary
    const finalY = (doc as any).lastAutoTable.finalY;
    doc.setFontSize(12);
    doc.text('Summary:', 14, finalY + 15);

    const summaryText = `
      Semester GPA (SGPA): ${semesterStats.sgpa.toFixed(3)}
      Credit Offered: ${semesterStats.offeredCredits.toFixed(2)}
      Credit Attempted: ${semesterStats.attemptedCredits.toFixed(2)}
      Credit Secured: ${semesterStats.securedCredits.toFixed(2)}
      Total Points Secured: ${semesterStats.totalPoints.toFixed(2)}
    `;
    doc.text(summaryText, 14, finalY + 22);

    // Footer
    const pageCount = (doc as any).internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
        doc.setPage(i);
        doc.setFontSize(10);
        doc.setTextColor(150);
        doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.getWidth() - 30, doc.internal.pageSize.getHeight() - 10);
        doc.text(`Generated by Interactive GPA & CGPA Calculator`, 14, doc.internal.pageSize.getHeight() - 10);
    }

    doc.save(`SGPA_Report_Semester_${selectedSemesterKey}.pdf`);
  };

  const canDownload = semesterStats.offeredCredits > 0;

  return (
    <div>
        <div className="text-center mb-4">
            <h2 className="text-3xl font-bold text-slate-800 dark:text-slate-200 mt-1 mb-2">
                Grade Point Average (GPA)
            </h2>
        </div>
        
        {/* In-flow element that transitions out */}
        <div 
            ref={displayElementRef} 
            className={`py-4 transition-all duration-300 ease-in-out ${isSticky ? 'opacity-0 scale-90 pointer-events-none' : 'opacity-100 scale-100'}`}
        >
            <SgpaDisplay 
                sgpa={semesterStats.sgpa}
                offeredCredits={semesterStats.offeredCredits}
                securedCredits={semesterStats.securedCredits}
                totalPoints={semesterStats.totalPoints}
                isSticky={false}
            />
        </div>

        {/* Sticky header that transitions in */}
        <div className={`fixed top-0 left-0 right-0 z-10 py-4 bg-gray-50/90 dark:bg-slate-900/90 backdrop-blur-sm border-b border-slate-200 dark:border-slate-700 shadow-md transition-all duration-300 ease-in-out ${isSticky ? 'opacity-100 translate-y-0' : 'opacity-0 -translate-y-full pointer-events-none'}`}>
            <SgpaDisplay 
                sgpa={semesterStats.sgpa}
                offeredCredits={semesterStats.offeredCredits}
                securedCredits={semesterStats.securedCredits}
                totalPoints={semesterStats.totalPoints}
                isSticky={true}
            />
        </div>

        <div className="max-w-2xl mx-auto">
            {canDownload && (
                <div className="mt-8 text-center">
                    <button
                        onClick={handleDownloadPdf}
                        className="inline-flex items-center justify-center gap-2 px-6 py-3 font-semibold rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-opacity-75 transition-all duration-300 bg-primary-600 text-white shadow-md hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled={!canDownload}
                    >
                        <DownloadIcon />
                        Download SGPA
                    </button>
                </div>
            )}

            <div className="mt-8">
                <div className="bg-white dark:bg-slate-800 rounded-xl shadow-lg p-6">
                    <div className="flex justify-center mb-6">
                         <select
                          value={selectedSemesterKey}
                          onChange={handleSemesterChange}
                          className="w-full max-w-xs bg-slate-100 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md p-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                        >
                          <option value="">Select a Semester</option>
                          {Object.keys(SEMESTER_COURSES).map(key => (
                            <option key={key} value={key}>
                              Semester {key}
                            </option>
                          ))}
                        </select>
                    </div>
                    
                    <div className="space-y-4">
                      {courses.length > 0 ? (
                        courses.map(course => (
                          <div key={course.code} className="grid grid-cols-3 gap-2 items-center">
                            <div className="col-span-2">
                              <p className="font-semibold text-slate-800 dark:text-slate-200">{course.name}</p>
                              <p className="text-sm text-slate-500 dark:text-slate-400">
                                {course.code} &bull; {course.credits} Credits
                              </p>
                            </div>
                            <select
                              value={grades[course.code] || 'N/A'}
                              onChange={e => handleGradeChange(course.code, e.target.value)}
                              className="bg-slate-100 dark:bg-slate-700 border border-slate-300 dark:border-slate-600 rounded-md p-2 text-sm focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                            >
                              {GRADE_OPTIONS.map(grade => (
                                <option key={grade} value={grade}>
                                  {grade}
                                </option>
                              ))}
                            </select>
                          </div>
                        ))
                      ) : (
                        <div className="text-center py-10 text-slate-500 dark:text-slate-400">
                          <p>Please select a semester to see courses.</p>
                        </div>
                      )}
                    </div>
                </div>
            </div>
        </div>
    </div>
  );
};

export default SgpaCalculator;